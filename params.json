{"name":"Selma","tagline":"Self Managing Software Defined Networks","body":"### Abstract.\r\nA key reason for the tremendous success of traditional\r\nnetworks is self management (plug-and-play MAC learning,\r\nrouting around failures with default OSPF configuration,\r\nautomated load balancing with ECMP, etc.). We\r\nargue that to facilitate large-scale adoption of softwaredefined\r\nnetworking (SDN), the same level of self management\r\nmust be provided. We present SelMa, a selfmanaging\r\nplatform for SDNs. SelMa automatically and\r\nproactively generates network configurations that adhere\r\nto operator-specified abstract policies (access control,\r\ntraffic steering, etc.) and dynamically adapts configuration\r\nin response to policy/topology changes. To accomplish\r\nthis, SelMa leverages new algorithmic insights to\r\ndetect policy conflicts, compose policies, and optimize\r\nthe translation of abstract global policies to concrete lowlevel\r\nforwarding state configuration. We evaluate a software\r\nimplementation of SelMa for large numbers of network\r\npolicies and on a broad variety of networks.\r\n\r\n### Running the System.\r\nIf you wish to run Selma on your own network all you have to do is the following:\r\n\r\n1. Download \"full solution\" directory to a windows computer with python 2.7 installed.\r\n1. Edit the graph file (test.graph) as follows:\r\n  * The first row is the number of nodes (switches or routers) in your graph. The nodes will be identified by a number between 0 and this number minus one.\r\n  * After a blank row each row represents a directed edge with its weight. For example a directed edge from node \"1\" to node \"2\" with weight 4 will be written: \"1 2 4\".\r\n1. Edit the policies input file (policies_input.py) as follows:\r\n  * Give names to ip subnets.\r\n  * Add each network function to FUNCTIONS_AND_AREAS map, and state where it resides. An integer represents the node in the graph, and a tuple an undirected edge.\r\n  * Add groups to the GROUPS map, by stating which ip subnets they include.\r\n  * Put in the IP_LOCATIONS map the location (node) of each subnet.\r\n  * Add policies as the POLICIES list:\r\n    * Traffic steering - \"*:Broadcast->FW->Zones\" - all traffic from \"Broadcast\" to \"Zones\" should traverse the network function \"FW\".\r\n    * Area Avoidance - \"dst_port=80:!Broadcast->RESTRICTED->Admins\" - Traffic on port 80 from \"Broadcast\" to \"Admins\" may not traverse the area \"RESTRICTED\". \r\n    * Access Control - \"*:!Broadcast2->Admins\" - No traffic is allowed from \"Broadcast2\" to \"Admins\".\r\n1. Run \"RunAll.bat\". \"rules.txt\" file will now contain forwarding rules for your network.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}